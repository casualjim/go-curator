// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/casualjim/go-curator (interfaces: ZookeeperFactory)

package mocks

import (
	time "time"
	zk "github.com/casualjim/go-zookeeper/zk"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of ZookeeperFactory interface
type MockZookeeperFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockZookeeperFactoryRecorder
}

// Recorder for MockZookeeperFactory (not exported)
type _MockZookeeperFactoryRecorder struct {
	mock *MockZookeeperFactory
}

func NewMockZookeeperFactory(ctrl *gomock.Controller) *MockZookeeperFactory {
	mock := &MockZookeeperFactory{ctrl: ctrl}
	mock.recorder = &_MockZookeeperFactoryRecorder{mock}
	return mock
}

func (_m *MockZookeeperFactory) EXPECT() *_MockZookeeperFactoryRecorder {
	return _m.recorder
}

func (_m *MockZookeeperFactory) NewZookeeper(_param0 []string, _param1 time.Duration) (zk.IConn, <-chan zk.Event, error) {
	ret := _m.ctrl.Call(_m, "NewZookeeper", _param0, _param1)
	ret0, _ := ret[0].(zk.IConn)
	ret1, _ := ret[1].(<-chan zk.Event)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockZookeeperFactoryRecorder) NewZookeeper(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewZookeeper", arg0, arg1)
}
